{"ast":null,"code":"import axios from \"axios\";\nconst LOGIN_USER_KEY = \"LOGIN_USER_KEY\";\nvar baseURL; // if (\n//   process.env.REACT_APP_ENVIRONMENT &&\n//   process.env.REACT_APP_ENVIRONMENT === \"PRODUCTION\"\n// ) {\n//   baseURL = process.env.REACT_APP_API_BASE_URL;\n// } else \n// baseURL = \"http://127.0.0.1:8000\";\n// }\n\nbaseURL = \"https://lemonade-backend.herokuapp.com/\";\nconst api = axios.create({\n  baseURL: baseURL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\napi.interceptors.request.use(config => {\n  if (localStorage.getItem(LOGIN_USER_KEY)) {\n    config.headers.common[\"Authorization\"] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n  }\n\n  return config;\n}, err => {\n  console.error(err);\n});\nexport default class API {\n  constructor() {\n    this.signUp = async (user_name, email, password) => {\n      const savedPost = await api.post(\"/users/signup/\", {\n        user_name: user_name,\n        email: email,\n        password: password\n      }).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return savedPost;\n    };\n\n    this.signIn = async (email, password) => {\n      const savedPost = await api.post(\"/users/signin/\", {\n        email: email,\n        password: password\n      }).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return savedPost;\n    };\n\n    this.getUsers = async () => {\n      const posts = await api.get(\"/users/\").then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return posts;\n    };\n\n    this.getItems = async () => {\n      let url = \"/items/\";\n      const items = await api.get(url).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return items;\n    };\n\n    this.getCarts = async () => {\n      const carts = await api.get(\"/carts/\").then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return carts;\n    };\n\n    this.addCarts = async item_id => {\n      const savedCart = await api.post(\"/carts/add/\", {\n        item: item_id,\n        quantity: 1\n      }).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return savedCart;\n    };\n\n    this.updateCarts = async (cart_id, quantity) => {\n      const savedCart = await api.put(\"/carts/update/\" + cart_id + \"/\", {\n        quantity: quantity\n      }).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return savedCart;\n    };\n\n    this.deleteCarts = async cart_id => {\n      const response = await api.delete(\"/carts/delete/\" + cart_id + \"/\").then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return response;\n    };\n\n    this.orderAdd = async (params = {}) => {\n      const order = await api.post(\"/orders/add/\", params).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return order;\n    };\n\n    this.getPosts = async () => {\n      const posts = await api.get(\"/posts/\").then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return posts;\n    };\n\n    this.addPost = async (name, body, image) => {\n      const formData = new FormData();\n      formData.append(\"name\", name);\n      formData.append(\"body\", body);\n      formData.append(\"image\", image);\n      const savedPost = await api.post(\"/posts/add/\", formData).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return savedPost;\n    };\n\n    this.deletePost = async id => {\n      const response = await api.delete(\"/posts/delete/\" + id + \"/\").then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return response;\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/techi.s./Desktop/Lemonade-main/frontend/src/API.js"],"names":["axios","LOGIN_USER_KEY","baseURL","api","create","headers","interceptors","request","use","config","localStorage","getItem","common","JSON","parse","token","err","console","error","API","signUp","user_name","email","password","savedPost","post","then","response","data","catch","Error","signIn","getUsers","posts","get","getItems","url","items","getCarts","carts","addCarts","item_id","savedCart","item","quantity","updateCarts","cart_id","put","deleteCarts","delete","orderAdd","params","order","getPosts","addPost","name","body","image","formData","FormData","append","deletePost","id"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nconst LOGIN_USER_KEY = \"LOGIN_USER_KEY\";\n\nvar baseURL;\n// if (\n//   process.env.REACT_APP_ENVIRONMENT &&\n//   process.env.REACT_APP_ENVIRONMENT === \"PRODUCTION\"\n// ) {\n//   baseURL = process.env.REACT_APP_API_BASE_URL;\n// } else \n// baseURL = \"http://127.0.0.1:8000\";\n// }\nbaseURL = \"https://lemonade-backend.herokuapp.com/\";\n\nconst api = axios.create({\n  baseURL: baseURL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\napi.interceptors.request.use(\n  (config) => {\n    if (localStorage.getItem(LOGIN_USER_KEY)) {\n      config.headers.common[\"Authorization\"] = JSON.parse(\n        localStorage.getItem(LOGIN_USER_KEY)\n      ).token;\n    }\n\n    return config;\n  },\n  (err) => {\n    console.error(err);\n  }\n);\n\nexport default class API {\n  //////////////////////////////\n  // USERS\n  /////////////////////////////\n\n  signUp = async (user_name, email, password) => {\n    const savedPost = await api\n      .post(\"/users/signup/\", {\n        user_name: user_name,\n        email: email,\n        password: password,\n      })\n      .then((response) => {\n        return response.data;\n      })\n      .catch((error) => {\n        throw new Error(error);\n      });\n    return savedPost;\n  };\n\n  signIn = async (email, password) => {\n    const savedPost = await api\n      .post(\"/users/signin/\", {\n        email: email,\n        password: password,\n      })\n      .then((response) => {\n        return response.data;\n      })\n      .catch((error) => {\n        throw new Error(error);\n      });\n    return savedPost;\n  };\n\n  getUsers = async () => {\n    const posts = await api\n      .get(\"/users/\")\n      .then((response) => {\n        return response.data;\n      })\n      .catch((error) => {\n        throw new Error(error);\n      });\n    return posts;\n  };\n\n  // ///////////////////////////////////////\n  // Items\n  // ///////////////////////////////////////\n\n  getItems = async () => {\n    let url = \"/items/\";\n    const items = await api\n      .get(url)\n      .then((response) => {\n        return response.data;\n      })\n      .catch((error) => {\n        throw new Error(error);\n      });\n    return items;\n  };\n\n  // ///////////////////////////////////////\n  // Carts\n  // //////////////////////////////////////\n\n  getCarts = async () => {\n    const carts = await api\n      .get(\"/carts/\")\n      .then((response) => {\n        return response.data;\n      })\n      .catch((error) => {\n        throw new Error(error);\n      });\n    return carts;\n  };\n\n  addCarts = async (item_id) => {\n    const savedCart = await api\n      .post(\"/carts/add/\", {\n        item: item_id,\n        quantity: 1,\n      })\n      .then((response) => {\n        return response.data;\n      })\n      .catch((error) => {\n        throw new Error(error);\n      });\n    return savedCart;\n  };\n\n  updateCarts = async (cart_id, quantity) => {\n    const savedCart = await api\n      .put(\"/carts/update/\" + cart_id + \"/\", {\n        quantity: quantity,\n      })\n      .then((response) => {\n        return response.data;\n      })\n      .catch((error) => {\n        throw new Error(error);\n      });\n    return savedCart;\n  };\n\n  deleteCarts = async (cart_id) => {\n    const response = await api\n      .delete(\"/carts/delete/\" + cart_id + \"/\")\n      .then((response) => {\n        return response.data;\n      })\n      .catch((error) => {\n        throw new Error(error);\n      });\n    return response;\n  };\n\n  ////////////////////////////////////////////\n  // Order/Checkout\n  // ////////////////////////////////////////\n\n  orderAdd = async (params = {}) => {\n    const order = await api\n      .post(\"/orders/add/\", params)\n      .then((response) => {\n        return response.data;\n      })\n      .catch((error) => {\n        throw new Error(error);\n      });\n    return order;\n  };\n\n  ///////////////////////////////////////////\n  // Reference Post\n  //////////////////////////////////////////\n\n  getPosts = async () => {\n    const posts = await api\n      .get(\"/posts/\")\n      .then((response) => {\n        return response.data;\n      })\n      .catch((error) => {\n        throw new Error(error);\n      });\n    return posts;\n  };\n\n  addPost = async (name, body, image) => {\n    const formData = new FormData();\n    formData.append(\"name\", name);\n    formData.append(\"body\", body);\n    formData.append(\"image\", image);\n    const savedPost = await api\n      .post(\"/posts/add/\", formData)\n      .then((response) => {\n        return response.data;\n      })\n      .catch((error) => {\n        throw new Error(error);\n      });\n    return savedPost;\n  };\n\n  deletePost = async (id) => {\n    const response = await api\n      .delete(\"/posts/delete/\" + id + \"/\")\n      .then((response) => {\n        return response.data;\n      })\n      .catch((error) => {\n        throw new Error(error);\n      });\n    return response;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}